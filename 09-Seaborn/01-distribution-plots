# Install seaborn

import seaborn as sns
import matplotlib.pyplot as plt

# Seaborn built in datasets
tips = sns.load_dataset('tips')

print(tips.head())

# price of the meal | tip | gender | smoker or not | dinner or lunch | size of the group
#    total_bill   tip     sex smoker  day    time  size
# 0       16.99  1.01  Female     No  Sun  Dinner     2
# 1       10.34  1.66    Male     No  Sun  Dinner      3
# 2       21.01  3.50    Male     No  Sun  Dinner     3
# 3       23.68  3.31    Male     No  Sun  Dinner     2
# 4       24.59  3.61  Female     No  Sun  Dinner     4


# Distribution plot
# Shows the distribution of ONE VARIABLE
# kde = False -> Whether to plot a gaussian kernel density estimate
# Bins parameter: The definition of the char. If the value increases there will be more columns

sns.distplot(tips['total_bill'], kde=False, bins=30)
plt.show()

# Jointplot: It combines two distribution plot, so, it needs two variables
sns.jointplot(x='total_bill', y='tip', data=tips)
# Kinds: default (empty kind parameter), 'hex', 'reg', 'kde'
# sns.jointplot(x='total_bill', y='tip', data=tips, kind='kde')
plt.show()

# Pairplot: Plots pairwise relationships across the numerical columns of the dataframe
# Makes a joinplot for each column combination
# When it compares the same variable, e.g. total_bill vs total_bill, it plots an histogram instead
sns.pairplot(tips)
plt.show()

# Hue: For categorical (non numerical) columns.
sns.pairplot(tips, hue='sex')
plt.show()

# # Another sample.
# sns.pairplot(tips, hue='day')
# plt.show()

# Palette: to specify the color palette
sns.pairplot(tips, hue='sex', palette='coolwarm')
plt.show()

# Rugplot: Represents the data with dashes
sns.rugplot(tips['total_bill'])
plt.show()

# KDE Explanation

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# Create dataset
dataset = np.random.randn(25)

# Create another rugplot
sns.rugplot(dataset);

# Set up the x-axis for the plot
x_min = dataset.min() - 2
x_max = dataset.max() + 2

# 100 equally spaced points from x_min to x_max
x_axis = np.linspace(x_min, x_max, 100)

# Set up the bandwidth, for info on this:
url = 'http://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth'

bandwidth = ((4 * dataset.std() ** 5) / (3 * len(dataset))) ** .2

# Create an empty kernel list
kernel_list = []

# Plot each basis function
for data_point in dataset:
    # Create a kernel for each point and append to list
    kernel = stats.norm(data_point, bandwidth).pdf(x_axis)
    kernel_list.append(kernel)

    # Scale for plotting
    kernel = kernel / kernel.max()
    kernel = kernel * .4
    plt.plot(x_axis, kernel, color='grey', alpha=0.5)

plt.ylim(0, 1)
# plt.show()

# kde-explanation chart
# The gray lines represent normal distributions on top of the blue dashes
# The normal distribution is centered around the dash


# To get the kde plot we can sum these basis functions.

# Plot the sum of the basis function
sum_of_kde = np.sum(kernel_list, axis=0)

# Plot figure
fig = plt.plot(x_axis, sum_of_kde, color='indianred')

# Add the initial rugplot
sns.rugplot(dataset, c='indianred')

# Get rid of y-tick marks
plt.yticks([])

# Set title
plt.suptitle("Sum of the Basis Functions")
plt.show()