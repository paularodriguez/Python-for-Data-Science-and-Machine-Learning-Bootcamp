import numpy as np

arr = np.arange(0, 11)

print(arr)

# Indexing
print(arr[5])

# Slicing
print(arr[5:8])
print(arr[:3])
print(arr[3:])

# Update multiple values - Only numpy arrays not simple python lists
arr[0:3] = 100
print(arr)

# Array operations - copies of arrays
array_copy = arr[5:]
array_copy[:] = 99
print(array_copy)

# NOTE! Original array is also updated. It's because Python creates a reference
# to the original array to save memory. If we want a copy of the original array
# we should specify it

print(arr)

# Copy array

right_array_copy = arr.copy()
print(right_array_copy)

# Perform changes
right_array_copy[:] = 100

# Now original array is not modified
print(right_array_copy)
print(arr)

# Indexing two-dimensional arrays

arr_2d = np.array([[5, 10, 15], [20, 25, 30], [35, 40, 45]])
print(arr_2d)

# First way: Double brackets

# Get 5
print(arr_2d[0][0])

# Get 25
print(arr_2d[1][1])

# Second way: Comma single bracket

# Get 5
print(arr_2d[0, 0])

# Get 25
print(arr_2d[1, 1])

# Slicing two-dimensional arrays: We specify rows and then columns

# Slice up to row two, from column 1 to end
#
# Returns:
# [[10, 15]
#  [25,30]]

print(arr_2d[:2, 1:])

#
# Returns:
# [[35,40]]

print(arr_2d[2:, :2])

# First two rows

print(arr_2d[:2])

# Conditional selection

my_array = np.arange(1, 11)
print(my_array)

# Returns an array of booleans, comparing each element
bool_array = my_array > 5
print(bool_array)

# Only returns those values where bool_array is true: [6,7,8,9,10]
print(my_array[bool_array])

# All process in one step
print(my_array[my_array > 2])

# Another example: Elements less than 3
print(my_array[my_array < 3])

# Final exercise

# [[ 0  1  2  3  4  5  6  7  8  9]
#  [10 11 12 13 14 15 16 17 18 19]
#  [20 21 22 23 24 25 26 27 28 29]
#  [30 31 32 33 34 35 36 37 38 39]
#  [40 41 42 43 44 45 46 47 48 49]]

array = np.arange(50).reshape(5,10)
print(array)

# Get 31 32 33 34

print(array[3:4,1:5])

# Get
# 13 14
# 23 24

print(array[1:3,3:5])


