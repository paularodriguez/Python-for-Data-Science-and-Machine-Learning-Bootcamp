# For this capstone project we will be analyzing some 911 call data from [Kaggle](https://www.kaggle.com/mchirico/montcoalert). The data contains the following fields:
#
# * lat : String variable, Latitude
# * lng: String variable, Longitude
# * desc: String variable, Description of the Emergency Call
# * zip: String variable, Zipcode
# * title: String variable, Title
# * timeStamp: String variable, YYYY-MM-DD HH:MM:SS
# * twp: String variable, Township
# * addr: String variable, Address
# * e: String variable, Dummy variable (always 1)

# Import numpy and pandas

import numpy as np
import pandas as pd

# Import visualization libraries and set %matplotlib inline

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot

# Read in the csv file as a dataframe called df

df = pd.read_csv('911.csv')

# Check the info() of the df

print(df.info())

# <class 'pandas.core.frame.DataFrame'>
# RangeIndex: 423909 entries, 0 to 423908
# Data columns (total 9 columns):
# lat          423909 non-null float64
# lng          423909 non-null float64
# desc         423909 non-null object
# zip          371780 non-null float64
# title        423909 non-null object
# timeStamp    423909 non-null object
# twp          423750 non-null object
# addr         423909 non-null object
# e            423909 non-null int64
# dtypes: float64(3), int64(1), object(5)
# memory usage: 29.1+ MB

# Check the head of df

print(df.head())


#          lat        lng  ...                        addr  e
# 0  40.297876 -75.581294  ...      REINDEER CT & DEAD END  1
# 1  40.258061 -75.264680  ...  BRIAR PATH & WHITEMARSH LN  1
# 2  40.121182 -75.351975  ...                    HAWS AVE  1
# 3  40.116153 -75.343513  ...          AIRY ST & SWEDE ST  1
# 4  40.251492 -75.603350  ...    CHERRYWOOD CT & DEAD END  1

#   lat	        lng	        desc	                                            zip	    title                   timeStamp	        twp	        addr	                e	Reason	Hour	Month	Day of Week
# 0	40.297876	-75.581294	REINDEER CT & DEAD END; NEW HANOVER; Station ...	19525.0	EMS: BACK PAINS/INJURY	2015-12-10 17:40:00	NEW HANOVER	REINDEER CT & DEAD END	1	EMS	17	12	Thu
# 1	40.258061	-75.264680	BRIAR PATH & WHITEMARSH LN; HATFIELD TOWNSHIP...	19446.0	EMS: DIABETIC EMERGENCY	2015-12-10 17:40:00	HATFIELD TOWNSHIP	BRIAR PATH & WHITEMARSH LN	1	EMS	17	12	Thu
# 2	40.121182	-75.351975	HAWS AVE; NORRISTOWN; 2015-12-10 @ 14:39:21-St...	19401.0	Fire: GAS-ODOR/LEAK	2015-12-10 17:40:00	NORRISTOWN	HAWS AVE	1	Fire	17	12	Thu


def separator():
    print("-" * 100)


separator()

## Basic Questions

# What are the top 5 zipcodes for 911 calls?

top_5 = df['zip'].value_counts().head(5)
print(top_5)

# 19401.0    28656
# 19464.0    27948
# 19403.0    21631
# 19446.0    20496
# 19406.0    14097
# Name: zip, dtype: int64

separator()

# What are the top 5 townships (twp) for 911 calls?

top_5_twp = df['twp'].value_counts().head(5)
print(top_5_twp)

# LOWER MERION    36441
# ABINGTON        25835
# NORRISTOWN      23883
# UPPER MERION    22694
# CHELTENHAM      19629
# Name: twp, dtype: int64

separator()

# Take a look at the 'title' column, how many unique title codes are there?

unique_title_codes = df['title'].nunique()
print(unique_title_codes)

# 141

separator()


## Creating new features

# In the titles column there are "Reasons/Departments" specified before the title code. These are EMS, Fire, and Traffic.
# Use .apply() with a custom lambda expression to create a new column called "Reason" that contains this string value.
# For example, if the title column value is EMS: BACK PAINS/INJURY , the Reason column value would be EMS.

def get_code(x):
    return x.split(':')[0]


df['Reason'] = df['title'].apply(get_code)
print(df['Reason'])

separator()

# What is the most common Reason for a 911 call based off of this new column?

top_3_reasons = df['Reason'].value_counts().head(3)
print(top_3_reasons)
separator()

# EMS        208676
# Traffic    151458
# Fire        63775
# Name: Reason, dtype: int64

# Now use seaborn to create a countplot of 911 calls by Reason.

sns.countplot(x='Reason', data=df)
plt.show()
# See file: 01.calls-reason-countplot.png

separator()

# Now let us begin to focus on time information.
# What is the data type of the objects in the timeStamp column?

print(type(df['timeStamp'][0]))
# <class 'str'>

separator()

# You should have seen that these timestamps are still strings.
# Use pd.to_datetime to convert the column from strings to DateTime objects.

df['timeStamp'] = df['timeStamp'].apply(pd.to_datetime)
print(type(df['timeStamp'][0]))

# <class 'pandas._libs.tslibs.timestamps.Timestamp'>

separator()

# You can use Jupyter's tab method to explore the various attributes you can call.
# Now that the timestamp column are actually DateTime objects, use .apply()
# to create 3 new columns called Hour, Month, and Day of Week.
# You will create these columns based off of the timeStamp column,
# reference the solutions if you get stuck on this step.

df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)
df['Month'] = df['timeStamp'].apply(lambda time: time.month)
df['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)

print(df['timeStamp'][0])
print(df['Hour'][0])
print(df['Month'][0])
print(df['Day of Week'][0])

# 2015-12-10 17:10:52
# 17
# 12
# 3

separator()

# Notice how the Day of Week is an integer 0-6.
# Use the .map() with this dictionary to map the actual string names to the day of the week:

dmap = {0: 'Mon', 1: 'Tue', 2: 'Wed', 3: 'Thu', 4: 'Fri', 5: 'Sat', 6: 'Sun'}

df['Day of Week'] = df['Day of Week'].map(dmap)
print(df['Day of Week'][0])

separator()

# Now use seaborn to create a countplot of the Day of Week column with the hue
# based off of the Reason column.


sns.countplot(x='Day of Week', hue='Reason', data=df)
plt.show()
# See file: 02.calls-day-of-week-countplot.png

separator()

# Now do the same for Month

sns.countplot(x='Month', hue='Reason', data=df)
plt.show()
# See file: 03.calls-month-countplot.png

separator()

# Did you notice something strange about the Plot?
# ** You should have noticed it was missing some Months, let's see if we can maybe fill in this information by plotting
# the information in another way, possibly a simple line plot that fills in the missing months, in order to do this, we'll need to
# do some work with pandas... *

# Now create a gropuby object called byMonth, where you group the DataFrame
# by the month column and use the count() method for aggregation.
# Use the head() method on this returned DataFrame.

byMonth = df.groupby('Month').count()
print(byMonth.head())

#          lat    lng   desc    zip  ...      e  Reason   Hour  Day of Week
# Month                              ...
# 1      37824  37824  37824  33480  ...  37824   37824  37824        37824
# 2      32828  32828  32828  28963  ...  32828   32828  32828        32828
# 3      37666  37666  37666  33416  ...  37666   37666  37666        37666
# 4      33583  33583  33583  29488  ...  33583   33583  33583        33583
# 5      35644  35644  35644  31114  ...  35644   35644  35644        35644

separator()

# Now create a simple plot off of the dataframe indicating the count of calls per month

byMonth['twp'].plot()
plt.show()

# See file: 04.calls-count-by-month-plot.png
separator()

# Now see if you can use seaborn's lmplot() to create a linear fit on the number
# of calls per month. Keep in mind you may need to reset the index to a column

sns.lmplot(x='Month', y='twp', data=byMonth.reset_index())
plt.show()

# See file: 05.calls-count-by-month-lmplot.png
separator()

# Create a new column called 'Date' that contains the date from the timeStamp column.
# You'll need to use apply along with the .date() method.

df['Date'] = df['timeStamp'].apply(lambda time: time.date())
print(df['Date'][0])
# 2015-12-10

separator()

# Now groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.

byDate = df.groupby('Date').count()
byDate['twp'].plot()
plt.show()

# See file: 06.calls-count-by-date-plot.png
separator()

# Now recreate this plot but create 3 separate plots with each plot representing a Reason for the 911 call

df[df['Reason'] == 'Traffic'].groupby('Date').count()['twp'].plot()
plt.title('Traffic')
plt.show()
# See file: 07.1.calls-by-reason-traffic-plot.png

df[df['Reason'] == 'Fire'].groupby('Date').count()['twp'].plot()
plt.title('Fire')
plt.show()
# See file: 07.2.calls-by-reason-fire-plot.png

df[df['Reason'] == 'EMS'].groupby('Date').count()['twp'].plot()
plt.title('EMS')
plt.show()
# See file: 07.3.calls-by-reason-ems-plot.png

separator()

# Now let's move on to creating heatmaps with seaborn and our data.
# We'll first need to restructure the dataframe so that the columns become
# the Hours and the Index becomes the Day of the Week.
# There are lots of ways to do this, but I would recommend trying
# to combine groupby with an unstack method.
# Reference the solutions if you get stuck on this!

dayHour = df.groupby(by=['Day of Week', 'Hour']).count()['Reason'].unstack()
print(dayHour.head())

# Hour           0     1     2     3    4   ...    19    20    21    22    23
# Day of Week                               ...
# Fri          1185  1001   930   832  821  ...  3254  2789  2445  2210  1866
# Mon          1207   974   857   784  871  ...  2821  2418  2005  1698  1283
# Sat          1515  1332  1206  1012  936  ...  3036  2632  2432  2073  1913
# Sun          1520  1331  1263  1033  954  ...  2679  2362  1994  1632  1470
# Thu          1115   873   920   775  784  ...  2923  2579  2230  1784  1486

separator()

# Now create a HeatMap using this new DataFrame

sns.heatmap(dayHour)
plt.show()
# See file: 08.calls-heatmap.png

# Now create a clustermap using this DataFrame

sns.clustermap(dayHour)
plt.show()
# See file: 09.calls-clustermap.png


# Now repeat these same plots and operations, for a DataFrame that shows the Month as the column

month = df.groupby(by=['Day of Week', 'Month']).count()['Reason'].unstack()
print(month.head())

# Month          1     2     3     4     5   ...    8     9     10    11    12
# Day of Week                                ...
# Fri          5532  4848  7344  5195  4989  ...  5312  6010  5179  4525  5570
# Mon          5716  5214  4663  5154  5019  ...  5212  4675  6385  4157  4286
# Sat          5103  4431  4914  4947  4275  ...  4355  5023  5051  4043  5200
# Sun          4882  3806  3569  4628  3940  ...  3963  4245  4852  3210  3896
# Thu          4985  4708  6010  4637  5469  ...  5328  5300  4940  5978  4899

separator()

# HeatMap - month

sns.heatmap(month)
plt.show()
# See file: 10.calls-month-heatmap.png

separator()

# Clustermap - month

sns.clustermap(month)
plt.show()
# See file: 11.calls-month-clustermap.png

separator()
