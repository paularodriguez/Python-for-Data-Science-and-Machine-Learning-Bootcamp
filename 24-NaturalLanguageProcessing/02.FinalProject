# Welcome to the NLP Project for this section of the course. In this NLP project you will be attempting
# to classify Yelp Reviews into 1 star or 5 star categories based off the text content in the reviews.
# This will be a simpler procedure than the lecture, since we will utilize the pipeline methods for more complex tasks.

# We will use the [Yelp Review Data Set from Kaggle](https://www.kaggle.com/c/yelp-recsys-2013).

# Each observation in this dataset is a review of a particular business by a particular user.
# The "stars" column is the number of stars (1 through 5) assigned by the reviewer to the business.
# (Higher stars is better.)
# In other words, it is the rating of the business by the person who wrote the review.

# The "cool" column is the number of "cool" votes this review received from other Yelp users.
# All reviews start with 0 "cool" votes, and there is no limit to how many "cool" votes a review can receive.
# In other words, it is a rating of the review itself, not a rating of the business.

# The "useful" and "funny" columns are similar to the "cool" column.

# Let's get started! Just follow the directions below!

# Import the usual suspects

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Utils to display full dataframe
desired_width = 320
pd.set_option('display.width', desired_width)
pd.set_option('display.max_columns', 100)

# The Data
# Read the yelp.csv file and set it as a dataframe called yelp.

yelp = pd.read_csv('yelp.csv')

print(yelp.head())
#               business_id        date               review_id  stars                                               text    type                 user_id  cool  useful  funny
# 0  9yKzy9PApeiPPOUJEtnvkg  2011-01-26  fWKvX83p0-ka4JS3dc6E5A      5  My wife took me here on my birthday for breakf...  review  rLtl8ZkDX5vH5nAx9C3q5Q     2       5      0
# 1  ZRJwVLyzEJq1VAihDhYiow  2011-07-27  IjZ33sJrzXqU-0X6U8NwyA      5  I have no idea why some people give bad review...  review  0a2KyEL0d3Yb1V6aivbIuQ     0       0      0
# 2  6oRAC4uyJCsJl1X0WZpVSA  2012-06-14  IESLBzqUCLdSzSqm0eCSxQ      4  love the gyro plate. Rice is so good and I als...  review  0hT2KtfLiobPvh6cDC8JQg     0       1      0
# 3  _1QQZuf4zZOyFCvXc0o6Vg  2010-05-27  G-WvGaISbqqaMHlNnByodA      5  Rosie, Dakota, and I LOVE Chaparral Dog Park!!...  review  uZetl9T0NcROGOyFfughhg     1       2      0
# 4  6ozycU1RpktNG2-1BroVtw  2012-01-05  1uJFq2r5QfJG_6ExMRCaGw      5  General Manager Scott Petello is a good egg!!!...  review  vYmM4KTsC8ZfQBg-j5MWkw     0       0      0

print(yelp.info())
# <class 'pandas.core.frame.DataFrame'>
# RangeIndex: 10000 entries, 0 to 9999
# Data columns (total 10 columns):
# business_id    10000 non-null object
# date           10000 non-null object
# review_id      10000 non-null object
# stars          10000 non-null int64
# text           10000 non-null object
# type           10000 non-null object
# user_id        10000 non-null object
# cool           10000 non-null int64
# useful         10000 non-null int64
# funny          10000 non-null int64
# dtypes: int64(4), object(6)
# memory usage: 781.4+ KB
# None

print(yelp.describe())
#               stars          cool        useful         funny
# count  10000.000000  10000.000000  10000.000000  10000.000000
# mean       3.777500      0.876800      1.409300      0.701300
# std        1.214636      2.067861      2.336647      1.907942
# min        1.000000      0.000000      0.000000      0.000000
# 25%        3.000000      0.000000      0.000000      0.000000
# 50%        4.000000      0.000000      1.000000      0.000000
# 75%        5.000000      1.000000      2.000000      1.000000
# max        5.000000     77.000000     76.000000     57.000000

# Create a new column called "text length" which is the number of words in the text column
yelp['text length'] = yelp['text'].apply(len)

print(yelp.head())
#               business_id        date               review_id  stars                                               text    type                 user_id  cool  useful  funny  text length
# 0  9yKzy9PApeiPPOUJEtnvkg  2011-01-26  fWKvX83p0-ka4JS3dc6E5A      5  My wife took me here on my birthday for breakf...  review  rLtl8ZkDX5vH5nAx9C3q5Q     2       5      0          889
# 1  ZRJwVLyzEJq1VAihDhYiow  2011-07-27  IjZ33sJrzXqU-0X6U8NwyA      5  I have no idea why some people give bad review...  review  0a2KyEL0d3Yb1V6aivbIuQ     0       0      0         1345
# 2  6oRAC4uyJCsJl1X0WZpVSA  2012-06-14  IESLBzqUCLdSzSqm0eCSxQ      4  love the gyro plate. Rice is so good and I als...  review  0hT2KtfLiobPvh6cDC8JQg     0       1      0           76
# 3  _1QQZuf4zZOyFCvXc0o6Vg  2010-05-27  G-WvGaISbqqaMHlNnByodA      5  Rosie, Dakota, and I LOVE Chaparral Dog Park!!...  review  uZetl9T0NcROGOyFfughhg     1       2      0          419
# 4  6ozycU1RpktNG2-1BroVtw  2012-01-05  1uJFq2r5QfJG_6ExMRCaGw      5  General Manager Scott Petello is a good egg!!!...  review  vYmM4KTsC8ZfQBg-j5MWkw     0       0      0          469

# EDA
# Let's explore the data
# Use FacetGrid from the seaborn library to create a grid of 5 histograms of text length based off of the star ratings.
# Reference the seaborn documentation for hints on this

g = sns.FacetGrid(yelp, col='stars')
g.map(plt.hist, 'text length')
plt.show()

# Create a boxplot of text length for each star category.
sns.boxplot(x='stars', y='text length', data=yelp, palette='coolwarm')
plt.show()

# Create a countplot of the number of occurrences for each type of star rating
sns.countplot(x=yelp['stars'], palette='rainbow')
plt.show()

# Use groupby to get the mean values of the numerical columns,
# you should be able to create this dataframe with the operation
stars = yelp.groupby('stars').mean()
print(stars)

#            cool    useful     funny  text length
# stars
# 1      0.576769  1.604806  1.056075   826.515354
# 2      0.719525  1.563107  0.875944   842.256742
# 3      0.788501  1.306639  0.694730   758.498289
# 4      0.954623  1.395916  0.670448   712.923142
# 5      0.944261  1.381780  0.608631   624.999101

# Use the corr() method on that groupby dataframe to produce this dataframe:
print(stars.corr())

#                  cool    useful     funny  text length
# cool         1.000000 -0.743329 -0.944939    -0.857664
# useful      -0.743329  1.000000  0.894506     0.699881
# funny       -0.944939  0.894506  1.000000     0.843461
# text length -0.857664  0.699881  0.843461     1.000000

# Then use seaborn to create a heatmap based off that .corr() dataframe:

sns.heatmap(data=stars.corr(), cmap='coolwarm')
plt.show()

# NLP Classification Task
# Let's move on to the actual task. To make things a little easier,
# go ahead and only grab reviews that were either 1 star or 5 stars.

# Create a dataframe called yelp_class that contains the columns of yelp dataframe
# but for only the 1 or 5 star reviews.

yelp_class = yelp[(yelp.stars == 1) | (yelp.stars == 5)]

print(yelp_class.groupby('stars').count())
#        business_id  date  review_id  text  type  user_id  cool  useful  funny  text length
# stars
# 1              749   749        749   749   749      749   749     749    749          749
# 5             3337  3337       3337  3337  3337     3337  3337    3337   3337         3337

# Create two objects X and y. X will be the 'text' column of yelp_class
# and y will be the 'stars' column of yelp_class.
# (Your features and target/labels)

X = yelp_class['text']
y = yelp_class['stars']

# Import CountVectorizer and create a CountVectorizer object

from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer()

# Use the fit_transform method on the CountVectorizer object and pass in X (the 'text' column). Save this result by overwriting X.

X = cv.fit_transform(X)
