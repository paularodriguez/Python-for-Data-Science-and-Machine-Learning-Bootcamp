# Install nltk library

import nltk

# Starts a shell program to download packages
# nltk.download_shell()

# We should follow the shell steps and download the 'stopwords' package

# We are going go work with one file of SMS from the UCI (University of California)
messages = [line.rstrip() for line in open('smsspamcollection/SMSSpamCollection')]

# PART 1: Data exploration

print(len(messages))
# 5574

print(messages[0])
# ham	Go until jurong point, crazy.. Available only in bugis n great world la e buffet... Cine there got amore wat...

for mess_no, message in enumerate(messages[0:10]):
    print(mess_no, message)

# 0 ham	Go until jurong point, crazy.. Available only in bugis n great world la e buffet... Cine there got amore wat...
# 1 ham	Ok lar... Joking wif u oni...
# 2 spam	Free entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C's apply 08452810075over18's
# 3 ham	U dun say so early hor... U c already then say...
# 4 ham	Nah I don't think he goes to usf, he lives around here though
# 5 spam	FreeMsg Hey there darling it's been 3 week's now and no word back! I'd like some fun you up for it still? Tb ok! XxX std chgs to send, £1.50 to rcv
# 6 ham	Even my brother is not like to speak with me. They treat me like aids patent.
# 7 ham	As per your request 'Melle Melle (Oru Minnaminunginte Nurungu Vettam)' has been set as your callertune for all Callers. Press *9 to copy your friends Callertune
# 8 spam	WINNER!! As a valued network customer you have been selected to receivea £900 prize reward! To claim call 09061701461. Claim code KL341. Valid 12 hours only.
# 9 spam	Had your mobile 11 months or more? U R entitled to Update to the latest colour mobiles with camera for Free! Call The Mobile Update Co FREE on 08002986030

# The format of the data is: message type - tab - message text
# We are going to parse this tab separated values (TSV) using pandas

import pandas as pd

messages = pd.read_csv('smsspamcollection/SMSSpamCollection', sep='\t', names=['label', 'message'])
print(messages.head())

#   label                                            message
# 0   ham  Go until jurong point, crazy.. Available only ...
# 1   ham                      Ok lar... Joking wif u oni...
# 2  spam  Free entry in 2 a wkly comp to win FA Cup fina...
# 3   ham  U dun say so early hor... U c already then say...
# 4   ham  Nah I don't think he goes to usf, he lives aro...

print(messages.describe())

#        label                 message
# count   5572                    5572
# unique     2                    5169
# top      ham  Sorry, I'll call later
# freq    4825                      30

print(messages.groupby('label').describe())

#         count unique                                                top freq
# label
# ham      4825   4516                             Sorry, I'll call later   30
# spam      747    653  Please call our customer service representativ...    4

# We are going to add one new column that is the length of the messages
messages['length'] = messages['message'].apply(len)

print(messages.head())
#   label                                            message  length
# 0   ham  Go until jurong point, crazy.. Available only ...     111
# 1   ham                      Ok lar... Joking wif u oni...      29
# 2  spam  Free entry in 2 a wkly comp to win FA Cup fina...     155
# 3   ham  U dun say so early hor... U c already then say...      49
# 4   ham  Nah I don't think he goes to usf, he lives aro...      61

import matplotlib.pyplot as plt
import seaborn as sns

sns.distplot(messages['length'], bins=50, kde=False)
plt.show()

print(messages['length'].describe())

# count    5572.000000
# mean       80.489950
# std        59.942907
# min         2.000000
# 25%        36.000000
# 50%        62.000000
# 75%       122.000000
# max       910.000000

# Get the largest message
print(messages[messages['length'] == 910]['message'].iloc[0])
# For me the love should start with attraction.i should feel that I need her every time around me.she should be the first thing which comes in my thoughts.I would start the day and end it with her.she should be there every time I dream.love will be then when my every breath has her name.my life should happen around her.my life will be named to her.I would cry for her.will give all my happiness and take all her sorrows.I will be ready to fight with anyone for her.I will be in love when I will be doing the craziest things for her.love will be when I don't have to proove anyone that my girl is the most beautiful lady on the whole planet.I will always be singing praises for her.love will be when I start up making chicken curry and end up makiing sambar.life will be the most beautiful then.will get every morning and thank god for the day because she is with me.I would like to say a lot..will tell later..

# Histogram of messages
messages.hist(column='length', by='label', bins=60, figsize=(12, 4))
plt.show()

# In the previus plot we see that spam messages tend to have more characters.

# PART 2: Data analysis

# We are going to split the message into words and remove those that are redundant.
# To do that, we are going to use the downloaded stopwords package

mess = "Sample message! Note: it has puctuation."

# Remove punctuation using string python module
import string

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~

nopunc = [c for c in mess if c not in string.punctuation]
print(nopunc)
# ['S', 'a', 'm', 'p', 'l', 'e', ' ', 'm', 'e', 's', 's', 'a', 'g', 'e', ' ', 'N', 'o', 't', 'e', ' ', 'i', 't', ' ', 'h', 'a', 's', ' ', 'p', 'u', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n']

# Remove stopwords
from nltk.corpus import stopwords

print(stopwords.words('english'))
# ['S', 'a', 'm', 'p', 'l', 'e', ' ', 'm', 'e', 's', 's', 'a', 'g', 'e', ' ', 'N', 'o', 't', 'e', ' ', 'i', 't', ' ', 'h', 'a', 's', ' ', 'p', 'u', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n']
# ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 'hers', 'herself', 'it', "it's", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', "that'll", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', "don't", 'should', "should've", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', "aren't", 'couldn', "couldn't", 'didn', "didn't", 'doesn', "doesn't", 'hadn', "hadn't", 'hasn', "hasn't", 'haven', "haven't", 'isn', "isn't", 'ma', 'mightn', "mightn't", 'mustn', "mustn't", 'needn', "needn't", 'shan', "shan't", 'shouldn', "shouldn't", 'wasn', "wasn't", 'weren', "weren't", 'won', "won't", 'wouldn', "wouldn't"]

# Join nopunc again
nopunc = ''.join(nopunc)
print(nopunc)
# Sample message Note it has puctuation

clean_mess = [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]

print(clean_mess)


# ['Sample', 'message', 'Note', 'puctuation']

# Now, we are going to apply the previous process to the entire dataframe

def text_process(mess):
    '''
    1. Remove puc
    2. Remove stop words
    3. Return list of clean text words
    :param mess: The text to process
    :return: List of words
    '''
    nopunc = [char for char in mess if char not in string.punctuation]
    nopunc = ''.join(nopunc)
    return [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]


# Utils to display full dataframe
desired_width = 320
pd.set_option('display.width', desired_width)
pd.set_option('display.max_columns', 100)

print(messages['message'].head(5).apply(text_process))

# 0    [Go, jurong, point, crazy, Available, bugis, n...
# 1                       [Ok, lar, Joking, wif, u, oni]
# 2    [Free, entry, 2, wkly, comp, win, FA, Cup, fin...
# 3        [U, dun, say, early, hor, U, c, already, say]
# 4    [Nah, dont, think, goes, usf, lives, around, t...
# Name: message, dtype: object

# Stemming
# run, running, ran, run -> run
# This technique will be applied later

# Vectorization: Each message will be converted into a vector

from sklearn.feature_extraction.text import CountVectorizer

bow_transformer = CountVectorizer(analyzer=text_process).fit(messages['message'])

print(len(bow_transformer.vocabulary_))

# 11425: Number of words that we have

mess4 = messages['message'][3]
print(mess4)
# U dun say so early hor... U c already then say...

bow4 = bow_transformer.transform([mess4])
print(bow4)
# (0, 4068)  2
# (0, 4629)  1
# (0, 5261)  1
# (0, 6204)  1
# (0, 6222)  1
# (0, 7186)  1
# (0, 9554)  2

print(bow4.shape)
# (1, 11425)

print(bow_transformer.get_feature_names()[4068])
# U

print(bow_transformer.get_feature_names()[9554])
# say

# PART 3

messages_bow = bow_transformer.transform(messages['message'])

print("Shape of sparse matrix: ", messages_bow.shape)
# Shape of sparse matrix:  (5572, 11425)

print("Amount of non zero occurrences: ", messages_bow.nnz)
# Amount of non zero occurrences:  50548

sparsity = (100.0 * messages_bow.nnz / (messages_bow.shape[0] * messages_bow.shape[1]))

print("Sparsity: ", sparsity)
# Sparsity:  0.07940295412668218

from sklearn.feature_extraction.text import TfidfTransformer

tfidf_transformer = TfidfTransformer().fit(messages_bow)
tfidf4 = tfidf_transformer.transform(bow4)
print(tfidf4)

# We have document frequency and term frequency relationship
# The numbers can be interpreted as a weight value for each of the words versus the document

# (0, 9554) 0.5385626262927564
# (0, 7186) 0.4389365653379857
# (0, 6222) 0.3187216892949149
# (0, 6204) 0.29953799723697416
# (0, 5261) 0.29729957405868723
# (0, 4629) 0.26619801906087187
# (0, 4068) 0.40832589933384067

# Get 'university' frequency
print(tfidf_transformer.idf_[bow_transformer.vocabulary_['university']])
# 8.527076498901426

messages_tfidf = tfidf_transformer.transform(messages_bow)

from sklearn.naive_bayes import MultinomialNB

spam_detect_model = MultinomialNB().fit(messages_tfidf, messages['label'])
prediction = spam_detect_model.predict(tfidf4)[0]

print(prediction)
# ham

# If we check the original dataframe, we'll see that the prediction has been done correctly
print(messages['label'][3])
# ham

# Now, we are going to run the prediction on all the messages
all_pred = spam_detect_model.predict(messages_tfidf)

# Previously, we did the prediction without split the dataset into train and test subsets.
# Now, we are going to split the dataset and redo the prediction

from sklearn.model_selection import train_test_split

msg_train, msg_test, label_train, label_test = train_test_split(messages['message'], messages['label'],
                                                                test_size=0.3, random_state=101)

# sklearn has a pipeline feature that allow us do the previous steps saving time

from sklearn.pipeline import Pipeline

pipeline = Pipeline([
    ('bow', CountVectorizer(analyzer=text_process)),
    ('tfidf', TfidfTransformer()),
    ('classifier', MultinomialNB())
])

pipeline.fit(msg_train, label_train)

predictions = pipeline.predict(msg_test)

from sklearn.metrics import classification_report

print(classification_report(label_test, predictions))
#               precision    recall  f1-score   support
#
#          ham       0.96      1.00      0.98      1475
#         spam       1.00      0.65      0.79       197
#
#     accuracy                           0.96      1672
#    macro avg       0.98      0.83      0.88      1672
# weighted avg       0.96      0.96      0.96      1672


# Instead of choosing MultinomialNB classifier, we can choose another else, as for examplo, RandomForestClassifier

from sklearn.ensemble import RandomForestClassifier

pipeline = Pipeline([
    ('bow', CountVectorizer(analyzer=text_process)),
    ('tfidf', TfidfTransformer()),
    ('classifier', RandomForestClassifier())
])

pipeline.fit(msg_train, label_train)
predictions = pipeline.predict(msg_test)

print(classification_report(label_test, predictions))

#               precision    recall  f1-score   support
#
#          ham       0.97      1.00      0.98      1475
#         spam       0.99      0.77      0.87       197
#
#     accuracy                           0.97      1672
#    macro avg       0.98      0.89      0.93      1672
# weighted avg       0.97      0.97      0.97      1672

